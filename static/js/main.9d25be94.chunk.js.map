{"version":3,"sources":["../react-memory-game/src/components/NavigationBar/index.js","../react-memory-game/src/components/ImageCard/index.js","../react-memory-game/src/components/Jumbotron/index.js","../react-memory-game/src/App.js","../react-memory-game/src/serviceWorker.js","../react-memory-game/src/index.js"],"names":["NavigationBar","props","react_default","a","createElement","className","href","message","score","topScore","ImageCard","key","id","onClick","ifClicked","clicked","src","image","Jumbotron","App","state","cards","displayOrder","_this","forEach","card","index","setState","sort","Math","random","_this$state","newScore","newTopScore","_this2","this","components_NavigationBar","components_Jumbotron","slice","map","components_ImageCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0pDA6BeA,MAxBf,SAAuBC,GACnB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACdH,EAAAC,EAAAC,cAAA,MAAIE,KAAK,KAAT,iBAEIJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACNH,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,UAQfL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,MAAX,MAAqBP,EAAMQ,cCLpCC,SAbG,SAAAT,GACd,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OACAC,UAAU,YACVM,IAAKV,EAAMW,GACXC,QAAS,kBAAKZ,EAAMa,UAAUb,EAAMW,GAAIX,EAAMc,WAC9Cb,EAAAC,EAAAC,cAAA,OAAKQ,GAAIX,EAAMW,GAAII,IAAKf,EAAMgB,MAAOZ,UAAU,6BCC5Ca,SATG,WACV,OACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gGCqEOe,6MAnEbC,MAAQ,CACNC,QACAd,QAAS,yBACTC,MAAO,EACPC,SAAU,KAGZK,UAAa,SAACF,EAAIG,GAChB,IAAMO,EAAeC,EAAKH,MAAMC,MAGhC,GAAIN,EAIF,OAHAO,EAAaE,QAAQ,SAACC,EAAMC,GAC1BJ,EAAaI,GAAOX,SAAU,IAEzBQ,EAAKI,SAAS,CACnBF,KAAMH,EAAaM,KAAK,kBAAMC,KAAKC,SAAW,KAC9CvB,QAAS,0BACTC,MAAO,IAGTc,EAAaE,QAAQ,SAACC,EAAMC,GACtBd,IAAOa,EAAKb,KACdU,EAAaI,GAAOX,SAAU,KAH7B,IAAAgB,EAOuBR,EAAKH,MAAzBX,EAPHsB,EAOGtB,SACFuB,EARDD,EAOavB,MACO,EACnByB,EAAcD,EAAWvB,EAAWuB,EAAWvB,EAErD,OAAOc,EAAKI,SAAS,CACnBF,KAAMH,EAAaM,KAAK,kBAAMC,KAAKC,SAAW,KAC9CvB,QAAS,yBACTC,MAAOwB,EACPvB,SAAUwB,6EASP,IAAAC,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACgC,EAAD,CACA7B,QAAS4B,KAAKf,MAAMb,QACpBC,MAAO2B,KAAKf,MAAMZ,MAClBC,SAAU0B,KAAKf,MAAMX,WAErBP,EAAAC,EAAAC,cAACiC,EAAD,MACCF,KAAKf,MAAMC,MAAMiB,MAAM,EAAE,IAAIC,IAAI,SAAAd,GAAI,OACpCvB,EAAAC,EAAAC,cAACoC,EAAD,CACA5B,GAAIa,EAAKb,GACTD,IAAKc,EAAKb,GACVG,QAASU,EAAKV,QACdE,MAAOQ,EAAKR,MACZH,UAAWoB,EAAKpB,sBA7DV2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d25be94.chunk.js","sourcesContent":["import React from \"react\";\r\n// import MessageText from '../MessageText'\r\nimport \"./style.css\";\r\n\r\n\r\nfunction NavigationBar(props) {\r\n    return (\r\n        <div>\r\n            <ul className=\"nav nav-justified\">\r\n            <li className=\"nav-item\">\r\n            <h1 href=\"/\">Clicky Game!</h1>\r\n                    </li>\r\n                <li className=\"nav-item\">\r\n                        <h1>{props.message}</h1>\r\n                    </li>\r\n                {/* <MessageText\r\n                    message={props.message}\r\n                    score={props.score}\r\n                    topScore={props.topScore}\r\n                /> */}\r\n                    \r\n                    <li className=\"nav-item\">\r\n                        <h1>{props.score} | {props.topScore}</h1>\r\n                    </li>\r\n                </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst ImageCard = props => {\r\n    return (\r\n        <div>\r\n            <div \r\n            className=\"container\" \r\n            key={props.id}\r\n            onClick={()=> props.ifClicked(props.id, props.clicked)}>\r\n            <img id={props.id} src={props.image} className=\"img-thumbnail shadow\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCard;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Jumbotron = () => {\r\n        return(\r\n        <div className=\"jumbotron-fluid\">\r\n        <h1>Clicky Game!</h1>\r\n        <h5>Click on an image to earn points, but don't click on any more than once!</h5>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar'\nimport ImageCard from './components/ImageCard'\nimport Jumbotron from './components/Jumbotron'\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    message: \"Click a card to Begin!\",\n    score: 0,\n    topScore: 0\n  };\n\n  ifClicked  = (id, clicked) => {\n    const displayOrder = this.state.cards\n\n\n    if (clicked) {\n      displayOrder.forEach((card, index) => {\n        displayOrder[index].clicked = false;\n      });\n      return this.setState({\n        card: displayOrder.sort(() => Math.random() - 0.5),\n        message: \"You Guessed Incorrectly\",\n        score: 0\n      })\n    } else {\n      displayOrder.forEach((card, index) => {\n        if (id === card.id) {\n          displayOrder[index].clicked = true;\n        }\n      });\n\n      const { topScore, score } = this.state;\n      const newScore = score + 1;\n      const newTopScore = newScore > topScore ? newScore : topScore;\n\n      return this.setState({\n        card: displayOrder.sort(() => Math.random() - 0.5),\n        message: \"You Guessed Correctly!\",\n        score: newScore,\n        topScore: newTopScore,\n      })\n    }\n\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n          <NavigationBar \n          message={this.state.message} \n          score={this.state.score} \n          topScore={this.state.topScore}\n          />\n          <Jumbotron />\n          {this.state.cards.slice(0,12).map(card => (\n            <ImageCard\n            id={card.id}\n            key={card.id}\n            clicked={card.clicked}\n            image={card.image}\n            ifClicked={this.ifClicked}\n             />\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}